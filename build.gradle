plugins {
    id "base"
    id "maven-publish"
}

def groovyVersion = '2.5.2'

/*
 * Change base version by applying a Git tag.
 *
 * Release snapshot version with ./gradlew publish -Prelease
 * Release final version with ./gradlew publish -Prelease=final
 */

def release = hasProperty("release")
def snapshot = findProperty("release") != "final"

def gitVersion = ["git", "describe", "--dirty", "--abbrev=${snapshot ? 0 : 7}"].execute().text.trim()
if (release && gitVersion.contains("dirty")) {
    throw new RuntimeException("Cannot release a dirty version")
}
if (release && !snapshot && gitVersion.contains("-")) {
    throw new RuntimeException("Cannot release an untagged version")
}
if (snapshot) {
    gitVersion += "-SNAPSHOT"
}

group = "org.gradle.groovy"
version = "$groovyVersion-$gitVersion"
description "Replacement for groovy-all.jar discontinued in Groovy 2.5"

allprojects {
    repositories {
    	mavenCentral()
    }
}

configurations {
    groovy
    groovySources
    groovyJavadoc
    groovyGroovydoc
}

dependencies {
    groovy        group: "org.codehaus.groovy", name: "groovy-all", version: groovyVersion
    groovySources group: "org.codehaus.groovy", name: "groovy-all", version: groovyVersion, classifier: "sources"
}

task configureGroovyAll {
    doFirst {
        groovyAll {
            configurations.groovy.filter { it.name ==~ /groovy-.*\.jar/ }.each { groovyJar ->
                from zipTree(groovyJar)
                manifest.from zipTree(groovyJar).find { it.name == "MANIFEST.MF" }
            }
        }
    }
}

task groovyAll(type: Jar) {
    dependsOn configureGroovyAll
    // Keep all licenses and ExtensionModules
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    baseName = "groovy-all"
    destinationDir = file("build/artifacts/jar")
}

task download {
    inputs.files configurations.groovy
    outputs.dir "${buildDir}/artifacts"
    doLast {
        ArtifactResolutionResult result = dependencies.createArtifactResolutionQuery()
            .forModule("org.codehaus.groovy", "groovy-all", groovyVersion)
            .withArtifacts(JvmLibrary, SourcesArtifact, JavadocArtifact)
            .execute()
        result.resolvedComponents.each { ComponentArtifactsResult component ->
            component.getArtifacts(SourcesArtifact).each { artifact ->
                copy {
                    from artifact.file
                    into "${buildDir}/artifacts/sources"
                }
            }
            component.getArtifacts(JavadocArtifact).each { artifact ->
                copy {
                    from artifact.file
                    into "${buildDir}/artifacts/javadoc"
                }
            }
        }
    }
}

task version {
    doLast {
        println version
    }
}

def jarArtifact = artifacts.add("default", groovyAll)
def sourcesArtifact = artifacts.add("default", file("${buildDir}/artifacts/sources/groovy-all-${groovyVersion}-sources.jar")) {
    builtBy download
    classifier "sources"
}
def javadocArtifact = artifacts.add("default", file("${buildDir}/artifacts/javadoc/groovy-all-${groovyVersion}-javadoc.jar")) {
    builtBy download
    classifier "javadoc"
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact jarArtifact
            artifact sourcesArtifact
            artifact javadocArtifact
        }
    }
    repositories {
        maven {
            name = "local"
            url = "$buildDir/repos/external"
        }
        if (release) {
            maven {
                name = "gradle"
                def repoType = snapshot ? "snapshots" : "releases"
                url = "https://repo.gradle.org/gradle/libs-$repoType-local"
                authentication {
                    basic(BasicAuthentication) {
                        credentials {
                            username = property("artifactory_user") ?: "nouser"
                            password = property("artifactory_password") ?: "nopass"
                        }
                    }
                }
            }
        }
    }
}
